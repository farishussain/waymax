:py:mod:`waymax.metrics`
========================

.. py:module:: waymax.metrics

.. autoapi-nested-parse::

   Metrics for agent evaluation.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   abstract_metric/index.rst
   comfort/index.rst
   imitation/index.rst
   metric_factory/index.rst
   overlap/index.rst
   roadgraph/index.rst
   route/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   waymax.metrics.AbstractMetric
   waymax.metrics.MetricResult
   waymax.metrics.LogDivergenceMetric
   waymax.metrics.OverlapMetric
   waymax.metrics.OffroadMetric
   waymax.metrics.WrongWayMetric
   waymax.metrics.OffRouteMetric
   waymax.metrics.ProgressionMetric



Functions
~~~~~~~~~

.. autoapisummary::

   waymax.metrics.get_metric_names
   waymax.metrics.register_metric
   waymax.metrics.run_metrics



.. py:class:: AbstractMetric


   Abstract class for simulator metrics.

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> MetricResult
      :abstractmethod:

      Computes a per-timestep, per-object metric from a SimulatorState.

      :param simulator_state: The current simulator state of shape (...).

      :returns: A MetricResult containing the metric result and validity mask of shape
                (..., num_objects).



.. py:class:: MetricResult


   Bases: :py:obj:`waymax.datatypes.MaskedArray`

   A metric result holding metric values and a validity mask.

   .. attribute:: value

      A (...) float32 array of values.

   .. attribute:: valid

      A (...) boolean validity mask.

   .. py:method:: validate() -> None

      Validates shape and type.



.. py:class:: LogDivergenceMetric


   Bases: :py:obj:`waymax.metrics.abstract_metric.AbstractMetric`

   Log divergence metric.

   This metric returns the L2 distance between the controlled object's XY
   location and its position in the logged history at the same timestep.

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> waymax.metrics.abstract_metric.MetricResult

      Computes log divergence by fetching correct arguments.

      :param simulator_state: The current simulator state.

      :returns: A (..., num_objects) MetricResult containing the metric result, with L2
                values representing the distance of each object from the log to the
                simulated trajectory at the current timestep.


   .. py:method:: compute_log_divergence(object_xy: jax.Array, log_xy: jax.Array) -> jax.Array
      :classmethod:

      Computes the L2 distance between `object_xy` and `log_xy`.

      :param object_xy: XY coordinates of current vehicles for the current timestep, of
                        shape (..., num_objects, num_timesteps, 2).
      :param log_xy: XY coordinates of logged vehicles for the current timestep, of
                     shape (..., num_objects, num_timesteps, 2).

      :returns:

                A (..., num_objects, num_timesteps) array containing the metric result of
                  the same shape as the input trajectories.



.. py:function:: get_metric_names() -> collections.abc.Iterable[str]

   Returns the names of all registered metrics.


.. py:function:: register_metric(metric_name: str, metric: waymax.metrics.abstract_metric.AbstractMetric)

   Register a metric.

   This function registers a metric so that it can be included in a MetricsConfig
   and computed by `run_metrics`.

   :param metric_name: String name to register the metric with.
   :param metric: The metric to register.


.. py:function:: run_metrics(simulator_state: waymax.datatypes.SimulatorState, metrics_config: waymax.config.MetricsConfig) -> dict[str, waymax.metrics.abstract_metric.MetricResult]

   Runs all metrics with config flags set to True.

   User-defined metrics must be registered using the `register_metric` function.

   :param simulator_state: The current simulator state of shape (...).
   :param metrics_config: Waymax metrics config.

   :returns:

             A dictionary of metric names mapping to metric result arrays where each
               metric is of shape (..., num_objects).


.. py:class:: OverlapMetric


   Bases: :py:obj:`waymax.metrics.abstract_metric.AbstractMetric`

   Overlap metric.

   This metric returns 1.0 if an object's bounding box is overlapping with
   that of another object.

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> waymax.metrics.abstract_metric.MetricResult

      Computes a per-timestep, per-object metric from a SimulatorState.

      :param simulator_state: The current simulator state of shape (...).

      :returns: A MetricResult containing the metric result and validity mask of shape
                (..., num_objects).


   .. py:method:: compute_overlap(current_traj: waymax.datatypes.Trajectory) -> waymax.metrics.abstract_metric.MetricResult

      Computes the overlap metric.

      :param current_traj: Trajectory object containing current states of shape (...,
                           num_objects, num_timesteps=1).

      :returns: A (..., num_objects) MetricResult.



.. py:class:: OffroadMetric


   Bases: :py:obj:`waymax.metrics.abstract_metric.AbstractMetric`

   Offroad metric.

   This metric returns 1.0 if the object is offroad.

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> waymax.metrics.abstract_metric.MetricResult

      Computes the offroad metric.

      :param simulator_state: Updated simulator state to calculate metrics for. Will
                              compute the offroad metric for timestep `simulator_state.timestep`.

      :returns:

                An array containing the metric result of the same shape as the input
                  trajectories. The shape is (..., num_objects).



.. py:class:: WrongWayMetric


   Bases: :py:obj:`waymax.metrics.abstract_metric.AbstractMetric`

   Wrong-way metric for SDC.

   This metric checks if SDC is driving into wrong driving the wrong way or path.
   It first computes the distance to the closest roadgraph point in all valid
   paths that the SDC can drive along from its starting position. If the distance
   is larger than the threhold WRONG_WAY_THRES, it's considered wrong-way and
   returns the distance; otherwise, it's driving on the legal lanes, and returns
   0.0.

   .. py:attribute:: WRONG_WAY_THRES
      :value: 3.5

      

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> waymax.metrics.abstract_metric.MetricResult

      Computes a per-timestep, per-object metric from a SimulatorState.

      :param simulator_state: The current simulator state of shape (...).

      :returns: A MetricResult containing the metric result and validity mask of shape
                (..., num_objects).



.. py:class:: OffRouteMetric


   Bases: :py:obj:`waymax.metrics.abstract_metric.AbstractMetric`

   Off-route metric for the SDC.

   The SDC is considered off-route either if 1) it is farther than
   MAX_DISTANCE_TO_ROUTE_PATH from the closest on-route path, or 2) it is farther
   from the closest on-route path than the closest off-route path by
   MAX_RELATIVE_DISTANCE_TO_OFF_ROUTE_PATH.

   If the SDC is on-route, the SDC trajectory is completely invalid, or there are
   no valid on-route paths, it returns zero.

   If the SDC is off-route, this metric returns the distance to the closest valid
   on-route path. If there are no valid on-route paths, it returns the distance
   to the closest valid off-route path.

   .. py:attribute:: MAX_DISTANCE_TO_ROUTE_PATH
      :value: 5

      

   .. py:attribute:: MAX_RELATIVE_DISTANCE_TO_OFF_ROUTE_PATH
      :value: 2

      

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> waymax.metrics.abstract_metric.MetricResult

      Computes the off route metric.

      :param simulator_state: The current simulator state of shape (....).

      :returns: A (...) MetricResult containing the metric result described above.

      :raises ValueError: If `simulator_state.sdc_paths` is undefined.



.. py:class:: ProgressionMetric


   Bases: :py:obj:`waymax.metrics.abstract_metric.AbstractMetric`

   Route progression metric for SDC.

   This metric returns a non-negative value representing the progression
   towards the final logged position from the initial logged position along the
   route. It first finds the closest on-route path to the SDC's current xy
   position according to Euclidean distance and uses that as the reference path
   to compute the progress (`arc_length`) relative to the logged SDC's initial
   and final xy positions.

   If the SDC trajectory is invalid or there are no valid on-route paths, it
   returns zero.

   .. py:method:: compute(simulator_state: waymax.datatypes.SimulatorState) -> waymax.metrics.abstract_metric.MetricResult

      Computes the progression metric.

      :param simulator_state: The current simulator state of shape.

      :returns: A (...) MetricResult containing the metric result described above.

      :raises ValueError: If `simulator_state.sdc_paths` is undefined.



